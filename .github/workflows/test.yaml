name: Docker Image Release

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Install jq
      run:  sudo apt-get update && sudo apt-get install -y jq

    # - name: Check for changes in elephant.json
    #   id: check_changes
    #   run: |
    #     if [[ $(git diff --name-only ${{ github.event.before }} ${{ github.sha }}) == *"elephant.json"* ]]; then
    #       echo "::set-output name=changes::true"
    #     else
    #       echo "::set-output name=changes::false"
    #     fi
    - name: Get previous version (alternative approach)
      id: get_previous_version
      run: |
        # Fetch only the latest tag if available
        git fetch --depth=1 origin HEAD@{tag} || true
        # If no tag available, fetch previous commit
        git fetch --depth=1 origin HEAD~1 || true
        # Extract version from commit message or fallback to "unknown"
        echo "::set-output name=version::$(git show -s --format='%B' origin/HEAD@{1} | jq -r '.version' || echo 'unknown')"

    - name: Get current version
      id: get_current_version
      run: |
        echo "::set-output name=version::$(jq -r '.version' elephant.json)"

    - name: Compare versions
      run: |
        if [[ "${{ steps.get_previous_version.outputs.version }}" != "${{ steps.get_current_version.outputs.version }}" ]]; then
          echo "elephant.json version has changed!"
        else
          echo "elephant.json version is unchanged."
        fi
    - name: Notify if elephant.json changed
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        echo "The elephant.json file has been changed."

    - name: read version from elephant.json or get latest tag
      id: get_tag
      run: |
        if [ ${{ steps.check_changes.outputs.changes }} == "true" ]; then
          json=$(cat elephant.json)
          version=$(echo $json | jq -r '.version')
        else
          TAG=$(curl -s "https://registry.hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/elephant/tags?page_size=1024" | \
          jq -r '.results|.[]|.name' | sort -V | tail -n 1)
          IFS='.' read -ra ADDR <<< "$TAG"
          NEW_PATCH=$((ADDR[2] + 1))
          version="${ADDR[0]}.${ADDR[1]}.$NEW_PATCH"
        fi
        echo "::set-output name=tag::$version"
        
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/elephant:${{ steps.get_tag.outputs.tag }}

    - name: Checkout GitOpsElephant repository
      uses: actions/checkout@v2
      with:
        repository: Helga09/GitOpsElephant
        path: GitOpsElephant
        token: ${{ secrets.GIT_TOKEN }}

    - name: Update Docker image tag in elephant.yaml
      run: |
        ls
        pwd
        sed -i 's|image: helga09/elephant:.*|image: helga09/elephant:${{ steps.get_tag.outputs.tag }}|' GitOpsElephant/my-app/elephant.yaml

    - name: Commit and push changes
      run: |
        cd GitOpsElephant
        git config --global user.name 'Helga09'
        git config --global user.email 'olhavashenko@gmail.com'
        git add .
        git commit -m "Update Docker image tag to ${{ steps.project_version.outputs.version }}"
        git push
